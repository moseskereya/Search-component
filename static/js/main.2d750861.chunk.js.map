{"version":3,"sources":["Components/AutoComplete.js","App.js","serviceWorker.js","index.js"],"names":["App1","props","onText","e","value","target","suggestions","length","regex","RegExp","items","sort","filter","v","test","setState","text","state","this","map","className","onClick","suggestionsSelected","type","onChange","renerSuggestions","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAqFeA,G,kBAjFX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAoCVC,OAAS,SAACC,GACN,IAAMC,EAAQD,EAAEE,OAAOD,MACnBE,EAAc,GAClB,GAAGF,EAAMG,OAAS,EAAE,CAChB,IAAMC,EAAQ,IAAIC,OAAJ,WAAeL,GAAS,KACtCE,EAAc,EAAKI,MAAMC,OAAOC,QAAO,SAAAC,GAAC,OAAIL,EAAMM,KAAKD,MACvD,EAAKE,UAAS,iBAAM,CAACT,cAAaU,KAAMZ,QAzC5C,EAAKM,MAAQ,CACT,YACA,QACA,QACA,SACA,OACA,MACA,UACA,SACA,OACA,MACA,gBACA,cACA,OACA,MACA,OACA,SACA,UACA,OACA,MACA,aACA,WACA,OACA,QACA,SACA,SACA,QAGJ,EAAKO,MAAO,CACRX,YAAY,GACZU,KAAM,IAjCK,E,gFAgDC,IAAD,OACRV,EAAeY,KAAKD,MAApBX,YACP,OAA0B,IAAvBA,EAAYC,OACJ,KAIP,4BACCD,EAAYa,KAAI,SAACT,GAAD,OAAW,wBAAIU,UAAU,OAAOC,QAAS,kBAAM,EAAKC,oBAAoBZ,KAASA,S,0CAKtFN,GAChBc,KAAKH,UAAS,iBAAO,CACjBC,KAAMZ,EACNE,YAAa,S,+BAIX,IACEU,EAAQE,KAAKD,MAAbD,KACR,OACI,yBAAKI,UAAU,gBACX,2BAAOG,KAAK,OAAOnB,MAAOY,EAAOQ,SAAUN,KAAKhB,SACpD,4BACKgB,KAAKO,yB,GA3EHC,cCaJC,MAXf,WACE,OACE,yBAAKP,UAAU,OACb,yBAAKA,UAAU,kBACf,gDACA,kBAAC,EAAD,SCEcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2d750861.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport \"../Components/Auto.css\"\r\nclass App1 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.items = [\r\n            \"Scottcate\",\r\n            \"Moses\",\r\n            \"Jamie\",\r\n            \"Lazaro\",\r\n            \"John\",\r\n            \"Joe\",\r\n            \"Lampard\",\r\n            \"Daniel\",\r\n            \"Ford\",\r\n            \"Bmw\",\r\n            \"Mercedez Benz\",\r\n            \"Kilimanjaro\",\r\n            \"Kibo\",\r\n            \"Abx\",\r\n            \"cars\",\r\n            \"Banana\",\r\n            \"Flowers\",\r\n            \"HTML\",\r\n            \"CSS\",\r\n            \"Javascript\",\r\n            \"React Js\",\r\n            \"Ruby\",\r\n            \"Swift\",\r\n            \"Django\",\r\n            \"Python\",\r\n            \"Paul\"\r\n        ];\r\n\r\n        this.state ={\r\n            suggestions:[],\r\n            text: ''\r\n        }\r\n    }\r\n\r\n    onText = (e) =>{\r\n        const value = e.target.value;\r\n        let suggestions = []\r\n        if(value.length > 0){\r\n            const regex = new RegExp(`^${value}`, 'i');\r\n            suggestions = this.items.sort().filter(v => regex.test(v));\r\n            this.setState(() =>({suggestions, text: value}))\r\n        }\r\n    \r\n    }\r\n\r\n    renerSuggestions (){\r\n        const {suggestions} = this.state;\r\n        if(suggestions.length === 0){\r\n            return null;\r\n\r\n        }\r\n        return (\r\n            <ul>\r\n            {suggestions.map((items) => <li className=\"list\" onClick={() => this.suggestionsSelected(items)}>{items}</li>)}\r\n           </ul>\r\n        )\r\n    }\r\n\r\n    suggestionsSelected(value) {\r\n        this.setState(() => ({\r\n            text: value,\r\n            suggestions: []\r\n        }))\r\n    }\r\n\r\n    render() { \r\n        const { text} = this.state;\r\n        return ( \r\n            <div className=\"AutoComplete\">\r\n                <input type=\"text\" value={text}  onChange={this.onText} />\r\n            <ul>\r\n                {this.renerSuggestions()}\r\n            </ul>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default App1;","import React from 'react';\nimport './App.css';\nimport App1 from \"./Components/AutoComplete\"\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-components\"> \n      <h4>Search component</h4>\n      <App1/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}